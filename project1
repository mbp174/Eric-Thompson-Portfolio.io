from collections import Counter
# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
#Converts "M" or "B" to the numerical value as a float and adds to a new list
def float_damages():
  updated_damages = []
  for i in damages:
    if i != 'Damages not recorded':
      updated_damages.append(float(i[:len(i)-1]) * float(conversion[i[-1]]))
    elif i == 'Damages not recorded':
      updated_damages.append(i)
  return updated_damages

updated_damages = float_damages()
# test function by updating damages
#damages.append("23.86M")
print(float_damages())
# 2 
# Create a Table
def hurricanes_dict():
  hurricanes = {}
  place = 0
  for i in names:
    hurricanes[i] = {'Name': i, 'Month': months[place], 'Year': years[place], 'Max Sustained Wind': max_sustained_winds[place], 'Areas Affected': areas_affected[place], 'Damage': updated_damages[place], 'Deaths': deaths[place]}
    place = place + 1
  return hurricanes
# Create and view the hurricanes dictionary
hurricanes = hurricanes_dict()
print(hurricanes)
# 3
# Organizing by Year
def sort_year():
  hurricane_year = {}
  for i in hurricanes:
    current_year = hurricanes[i]["Year"]
    current_cane = [hurricanes[i]]
    if current_year not in hurricane_year:
      hurricane_year[current_year] = current_cane
    elif current_year in hurricane_year:
      hurricane_year[current_year].append(current_cane)
  return hurricane_year

print(sort_year())
# create a new dictionary of hurricanes with year and key
hurricanes_sorted_year = sort_year()

# 4
# Counting Damaged Areas
def frequency_affected():
  frequencies = {}
  for i in hurricanes:
    for x in hurricanes[i]["Areas Affected"]:
      if x not in frequencies:
        frequencies[x] = 1
      elif x in frequencies:
        frequencies[x] = frequencies[x] + 1
  return frequencies
  
# create dictionary of areas to store the number of hurricanes involved in
frequencies = frequency_affected()
print(frequencies)

# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in
def most_affected():
  sorted_dictionary = {}
  sorted_frequencies = sorted(frequencies.values())
  for i in frequencies:
    if frequencies[i] == sorted_frequencies[-1]:
      if frequencies[i] not in sorted_dictionary:
        sorted_dictionary = {i: sorted_frequencies[-1]}
    else:
      pass
  return sorted_dictionary

most_affected = most_affected()
print((most_affected))

# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths

def most_fatal():
  fatalities = {}
  most_fatal = {}
  for i in hurricanes:
    fatalities[i] = hurricanes[i]["Deaths"]
  sorted_fatalities = sorted(fatalities.values())
  for i in hurricanes:
    if hurricanes[i]["Deaths"] == sorted_fatalities[-1]:
      if fatalities[i] not in most_fatal:
        most_fatal = {i: sorted_fatalities[-1]}
    else:
      pass
 
  return most_fatal

most_fatal = most_fatal()
print((most_fatal))
# 7
# Rating Hurricanes by Mortality
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

# categorize hurricanes in new dictionary with mortality severity as key
def mortality_scale():
  cane_mortality = {"4": [], "3": [], "2": [], "1": [], "0": []}
  for i in hurricanes:
    current_mortality = hurricanes[i]["Deaths"]
    current_cane = [hurricanes[i]]
    if current_mortality >= 10000:
      cane_mortality["4"].append(current_cane)
    elif current_mortality >= 1000:
      cane_mortality["3"].append(current_cane)
    elif current_mortality >= 500:
      cane_mortality["2"].append(current_cane)
    elif current_mortality >= 100:
      cane_mortality["1"].append(current_cane)
    elif current_mortality == 0:
      cane_mortality["0"].append(current_cane)
  return cane_mortality

mortality_scale = mortality_scale()
print(mortality_scale)

# 8 Calculating Hurricane Maximum Damage
def most_damage():
  damage = 0
  most_damage = {}
  for i in hurricanes:
    if hurricanes[i]["Damage"] != "Damages not recorded":
      hurricanes[i]["Damage"] = int(hurricanes[i]["Damage"])
      if hurricanes[i]["Damage"] > damage:
        damage = hurricanes[i]["Damage"]
        most_damage = hurricanes[i]
  return most_damage

# find highest damage inducing hurricane and its total cost
most_damage = most_damage()
print(most_damage)

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def damage_scale():
  cane_damage = {"5": [], "4": [], "3": [], "2": [], "1": [], "0": []}
  for i in hurricanes:
    if hurricanes[i]["Damage"] != "Damages not recorded":
      current_damages = hurricanes[i]["Damage"]
      current_cane = [hurricanes[i]]
      hurricanes[i]["Damage"] = int(hurricanes[i]["Damage"])
      if current_damages > 50000000000:
        cane_damage["5"].append(current_cane)
      elif current_damages >= 10000000000:
        cane_damage["4"].append(current_cane)
      elif current_damages >= 1000000000:
        cane_damage["3"].append(current_cane)
      elif current_damages >= 100000000:
        cane_damage["2"].append(current_cane)
      elif current_damages > 0:
        cane_damage["1"].append(current_cane)
      elif current_damages == 0:
        cane_damage["0"].append(current_cane)
  return cane_damage

damage_scale = damage_scale()
print(damage_scale)
